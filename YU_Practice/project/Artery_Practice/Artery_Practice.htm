<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Artery_Practice.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Artery_Practice.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6230001: Last Updated: Mon Jul 14 16:00:26 2025
<BR><P>
<H3>Maximum Stack Usage =        324 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[c7]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5e]">ACC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5e]">ACC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[5e]">ACC_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[1c]">ADC1_2_3_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from at32f435_437_int.o(.text.BusFault_Handler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[20]">CAN1_SE_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[4c]">CAN2_SE_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[f]">CRM_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[42]">DMA1_Channel1_IRQHandler</a> from at32f435_437_int.o(.text.DMA1_Channel1_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[43]">DMA1_Channel2_IRQHandler</a> from at32f435_437_int.o(.text.DMA1_Channel2_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[44]">DMA1_Channel3_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[45]">DMA1_Channel4_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[46]">DMA1_Channel5_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[4e]">DMA1_Channel6_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[4f]">DMA1_Channel7_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[63]">DMA2_Channel1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[64]">DMA2_Channel2_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[65]">DMA2_Channel3_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[66]">DMA2_Channel4_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[67]">DMA2_Channel5_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[68]">DMA2_Channel6_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[69]">DMA2_Channel7_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[5c]">DMAMUX_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[55]">DVP_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from at32f435_437_int.o(.text.DebugMon_Handler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[15]">EDMA_Stream1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[16]">EDMA_Stream2_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[17]">EDMA_Stream3_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[18]">EDMA_Stream4_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[19]">EDMA_Stream5_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[1a]">EDMA_Stream6_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[1b]">EDMA_Stream7_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[39]">EDMA_Stream8_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[47]">EMAC_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[48]">EMAC_WKUP_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[33]">ERTCAlarm_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[d]">ERTC_WKUP_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[10]">EXINT0_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[32]">EXINT15_10_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[11]">EXINT1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[12]">EXINT2_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[13]">EXINT3_IRQHandler</a> from at32f435_437_int.o(.text.EXINT3_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[14]">EXINT4_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[21]">EXINT9_5_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[56]">FPU_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from at32f435_437_int.o(.text.HardFault_Handler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[2a]">I2C1_ERR_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[29]">I2C1_EVT_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[2c]">I2C2_ERR_IRQHandler</a> from at32f435_437_int.o(.text.I2C2_ERR_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[2b]">I2C2_EVT_IRQHandler</a> from at32f435_437_int.o(.text.I2C2_EVT_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[52]">I2C3_ERR_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[51]">I2C3_EVT_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from at32f435_437_int.o(.text.MemManage_Handler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from at32f435_437_int.o(.text.NMI_Handler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[4d]">OTGFS1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[34]">OTGFS1_WKUP_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[54]">OTGFS2_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[53]">OTGFS2_WKUP_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[b]">PVM_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from at32f435_437_int.o(.text.PendSV_Handler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[5b]">QSPI1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[5a]">QSPI2_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[3b]">SDIO1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[5d]">SDIO2_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[2e]">SPI2_I2S2EXT_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[3d]">SPI3_I2S3EXT_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[59]">SPI4_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from at32f435_437_int.o(.text.SVC_Handler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from at32f435_437_int.o(.text.SysTick_Handler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[6a]">SystemInit</a> from system_at32f435_437.o(.text.SystemInit) referenced from startup_at32f435_437.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[22]">TMR1_BRK_TMR9_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[25]">TMR1_CH_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[23]">TMR1_OVF_TMR10_IRQHandler</a> from at32f435_437_int.o(.text.TMR1_OVF_TMR10_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[24]">TMR1_TRG_HALL_TMR11_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[5f]">TMR20_BRK_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[62]">TMR20_CH_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[60]">TMR20_OVF_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[61]">TMR20_TRG_HALL_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[26]">TMR2_GLOBAL_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[27]">TMR3_GLOBAL_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[28]">TMR4_GLOBAL_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[3c]">TMR5_GLOBAL_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[40]">TMR6_DAC_GLOBAL_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[41]">TMR7_GLOBAL_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[35]">TMR8_BRK_TMR12_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[38]">TMR8_CH_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[36]">TMR8_OVF_TMR13_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[37]">TMR8_TRG_HALL_TMR14_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[57]">UART7_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[58]">UART8_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[50]">USART6_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from at32f435_437_int.o(.text.UsageFault_Handler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[a]">WWDT_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[3a]">XMC_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[6b]">__main</a> from __main.o(!!!main) referenced from startup_at32f435_437.o(.text)
 <LI><a href="#[6e]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[6d]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[6c]">fputc</a> from main_variable_resistor_printf.o(.text.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[71]"></a>__scatterload_rt2</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[130]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[131]"></a>__scatterload_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[72]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[132]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, __scatter.o(!!handler_null), UNUSED)

<P><STRONG><a name="[133]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[73]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[b8]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[75]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[77]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[79]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[7a]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[7b]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[134]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[7d]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[7f]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[80]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[81]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[83]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[85]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[87]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[88]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[89]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[8b]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[135]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[8d]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[8f]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[91]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[93]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[136]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[9f]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[95]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[137]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[97]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[138]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[139]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[13a]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[13b]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[13c]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[99]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[13d]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[13e]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[13f]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[140]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[141]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[142]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[143]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[144]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[145]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[146]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[147]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[148]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[149]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[14a]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[14b]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[a4]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[14c]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[14d]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[14e]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[14f]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[150]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[151]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[152]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[70]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[153]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[9c]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[9e]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[154]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[a0]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[155]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[c8]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[a3]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[156]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[a5]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + Unknown Stack Size
<LI>Call Chain = __rt_exit_exit &rArr; _sys_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>ACC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>CRM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMAMUX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DVP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EDMA_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EDMA_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EDMA_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EDMA_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EDMA_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EDMA_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EDMA_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EDMA_Stream8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>EMAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>EMAC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>ERTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>ERTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXINT15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXINT9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C3_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTGFS1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTGFS1_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTGFS2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>OTGFS2_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>QSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>QSPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SDIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_I2S2EXT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_I2S3EXT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TMR1_BRK_TMR9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TMR1_CH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TMR1_TRG_HALL_TMR11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>TMR20_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TMR20_CH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>TMR20_OVF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>TMR20_TRG_HALL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TMR2_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TMR3_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TMR4_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TMR5_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TMR6_DAC_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TMR7_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TMR8_BRK_TMR12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TMR8_CH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TMR8_OVF_TMR13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TMR8_TRG_HALL_TMR14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>XMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_at32f435_437.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[157]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
</UL>

<P><STRONG><a name="[158]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[159]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[ab]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[ac]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ad]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a9]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[7e]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[74]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[a8]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>

<P><STRONG><a name="[b1]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[86]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[b4]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[82]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[8a]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[b5]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[84]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[8c]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[76]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[b6]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[b3]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[ae]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[be]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[c1]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[af]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[c2]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[8e]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[90]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[c3]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[92]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[94]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[b0]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[c4]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[b2]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[9d]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[c5]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[98]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[c0]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[ba]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a2]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[15e]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[15f]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7em.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f435_437_int.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, at32f435_437_int.o(.text.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; i2c_dma_tx_irq_handler &rArr; i2c_dma_tx_rx_irq_handler &rArr; i2c_dma_config &rArr; dma_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_tx_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, at32f435_437_int.o(.text.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = DMA1_Channel2_IRQHandler &rArr; i2c_dma_rx_irq_handler &rArr; i2c_dma_tx_rx_irq_handler &rArr; i2c_dma_config &rArr; dma_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_rx_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f435_437_int.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXINT3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, at32f435_437_int.o(.text.EXINT3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EXINT3_IRQHandler &rArr; pca9555_irq_handler &rArr; exint_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pca9555_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f435_437_int.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ERR_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, at32f435_437_int.o(.text.I2C2_ERR_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C2_ERR_IRQHandler &rArr; i2c_err_irq_handler &rArr; i2c_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_err_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EVT_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, at32f435_437_int.o(.text.I2C2_EVT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = I2C2_EVT_IRQHandler &rArr; i2c_evt_irq_handler &rArr; i2c_master_irq_handler_dma &rArr; i2c_start_transfer &rArr; i2c_transmit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_evt_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f435_437_int.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f435_437_int.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f435_437_int.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f435_437_int.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f435_437_int.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>SystemInit</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, system_at32f435_437.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(.text)
</UL>
<P><STRONG><a name="[23]"></a>TMR1_OVF_TMR10_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, at32f435_437_int.o(.text.TMR1_OVF_TMR10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR1_OVF_TMR10_IRQHandler &rArr; tmr_flag_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f435_437_int.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, main_variable_resistor_printf.o(.text._sys_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[105]"></a>adc_base_config</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, at32f435_437_adc.o(.text.adc_base_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_base_config
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>adc_base_default_para_init</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, at32f435_437_adc.o(.text.adc_base_default_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_base_default_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10d]"></a>adc_calibration_init</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, at32f435_437_adc.o(.text.adc_calibration_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_calibration_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10e]"></a>adc_calibration_init_status_get</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, at32f435_437_adc.o(.text.adc_calibration_init_status_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_calibration_init_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10f]"></a>adc_calibration_start</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, at32f435_437_adc.o(.text.adc_calibration_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_calibration_start
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[110]"></a>adc_calibration_status_get</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, at32f435_437_adc.o(.text.adc_calibration_status_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_calibration_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>adc_common_config</STRONG> (Thumb, 204 bytes, Stack size 4 bytes, at32f435_437_adc.o(.text.adc_common_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_common_config
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>adc_common_default_para_init</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, at32f435_437_adc.o(.text.adc_common_default_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_common_default_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>adc_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, at32f435_437_adc.o(.text.adc_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10c]"></a>adc_flag_get</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, at32f435_437_adc.o(.text.adc_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>adc_ordinary_channel_set</STRONG> (Thumb, 354 bytes, Stack size 12 bytes, at32f435_437_adc.o(.text.adc_ordinary_channel_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_ordinary_channel_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10a]"></a>adc_ordinary_oversample_enable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at32f435_437_adc.o(.text.adc_ordinary_oversample_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_ordinary_oversample_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>adc_ordinary_oversample_restart_set</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, at32f435_437_adc.o(.text.adc_ordinary_oversample_restart_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_ordinary_oversample_restart_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>adc_ordinary_oversample_trig_enable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, at32f435_437_adc.o(.text.adc_ordinary_oversample_trig_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_ordinary_oversample_trig_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>adc_resolution_set</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, at32f435_437_adc.o(.text.adc_resolution_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_resolution_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11c]"></a>crm_ahb_div_set</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, at32f435_437_crm.o(.text.crm_ahb_div_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crm_ahb_div_set
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[11e]"></a>crm_apb1_div_set</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, at32f435_437_crm.o(.text.crm_apb1_div_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crm_apb1_div_set
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[11d]"></a>crm_apb2_div_set</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, at32f435_437_crm.o(.text.crm_apb2_div_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crm_apb2_div_set
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[11f]"></a>crm_auto_step_mode_enable</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, at32f435_437_crm.o(.text.crm_auto_step_mode_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crm_auto_step_mode_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[11a]"></a>crm_clock_source_enable</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, at32f435_437_crm.o(.text.crm_clock_source_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_clock_source_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[cf]"></a>crm_clocks_freq_get</STRONG> (Thumb, 366 bytes, Stack size 48 bytes, at32f435_437_crm.o(.text.crm_clocks_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[d3]"></a>crm_flag_get</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, at32f435_437_crm.o(.text.crm_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_hext_stable_wait
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[d2]"></a>crm_hext_stable_wait</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, at32f435_437_crm.o(.text.crm_hext_stable_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = crm_hext_stable_wait &rArr; crm_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[f3]"></a>crm_periph_clock_enable</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, at32f435_437_crm.o(.text.crm_periph_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[11b]"></a>crm_pll_config</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, at32f435_437_crm.o(.text.crm_pll_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_pll_config
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[119]"></a>crm_reset</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, at32f435_437_crm.o(.text.crm_reset))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[120]"></a>crm_sysclk_switch</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, at32f435_437_crm.o(.text.crm_sysclk_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crm_sysclk_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[d0]"></a>crm_sysclk_switch_status_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f435_437_crm.o(.text.crm_sysclk_switch_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[d4]"></a>delay_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, at_surf_f437_board_delay.o(.text.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_init &rArr; systick_clock_source_config
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_clock_source_config
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>delay_ms</STRONG> (Thumb, 216 bytes, Stack size 12 bytes, at_surf_f437_board_delay.o(.text.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
</UL>

<P><STRONG><a name="[d6]"></a>delay_sec</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, at_surf_f437_board_delay.o(.text.delay_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = delay_sec &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>dma_channel_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, at32f435_437_dma.o(.text.dma_channel_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_tx_rx_irq_handler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_config
</UL>

<P><STRONG><a name="[e0]"></a>dma_flag_clear</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, at32f435_437_dma.o(.text.dma_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dma_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_tx_rx_irq_handler
</UL>

<P><STRONG><a name="[df]"></a>dma_flag_get</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, at32f435_437_dma.o(.text.dma_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dma_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_tx_rx_irq_handler
</UL>

<P><STRONG><a name="[dd]"></a>dma_init</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, at32f435_437_dma.o(.text.dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_config
</UL>

<P><STRONG><a name="[dc]"></a>dma_interrupt_enable</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, at32f435_437_dma.o(.text.dma_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dma_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_tx_rx_irq_handler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_config
</UL>

<P><STRONG><a name="[118]"></a>exint_flag_clear</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, at32f435_437_exint.o(.text.exint_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = exint_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pca9555_irq_handler
</UL>

<P><STRONG><a name="[117]"></a>exint_flag_get</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, at32f435_437_exint.o(.text.exint_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = exint_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pca9555_irq_handler
</UL>

<P><STRONG><a name="[6c]"></a>fputc</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, main_variable_resistor_printf.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fputc &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[fb]"></a>gpio_default_para_init</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, at32f435_437_gpio.o(.text.gpio_default_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gpio_default_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>gpio_init</STRONG> (Thumb, 232 bytes, Stack size 12 bytes, at32f435_437_gpio.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>gpio_pin_mux_config</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, at32f435_437_gpio.o(.text.gpio_pin_mux_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_pin_mux_config
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>i2c_data_receive</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, at32f435_437_i2c.o(.text.i2c_data_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i2c_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_irq_handler_dma
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_irq_handler_int
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_irq_handler_int
</UL>

<P><STRONG><a name="[ed]"></a>i2c_data_send</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, at32f435_437_i2c.o(.text.i2c_data_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_data_send
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_irq_handler_int
</UL>

<P><STRONG><a name="[da]"></a>i2c_dma_config</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, i2c_application.o(.text.i2c_dma_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = i2c_dma_config &rArr; dma_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_enable
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_tx_rx_irq_handler
</UL>

<P><STRONG><a name="[e1]"></a>i2c_dma_enable</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, at32f435_437_i2c.o(.text.i2c_dma_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_dma_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_tx_rx_irq_handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_irq_handler_dma
</UL>

<P><STRONG><a name="[ca]"></a>i2c_dma_rx_irq_handler</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2c_application.o(.text.i2c_dma_rx_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = i2c_dma_rx_irq_handler &rArr; i2c_dma_tx_rx_irq_handler &rArr; i2c_dma_config &rArr; dma_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_tx_rx_irq_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>i2c_dma_tx_irq_handler</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2c_application.o(.text.i2c_dma_tx_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = i2c_dma_tx_irq_handler &rArr; i2c_dma_tx_rx_irq_handler &rArr; i2c_dma_config &rArr; dma_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_tx_rx_irq_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>i2c_dma_tx_rx_irq_handler</STRONG> (Thumb, 986 bytes, Stack size 120 bytes, i2c_application.o(.text.i2c_dma_tx_rx_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = i2c_dma_tx_rx_irq_handler &rArr; i2c_dma_config &rArr; dma_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_clear
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_get
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_enable
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_enable
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_interrupt_enable
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_config
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_tx_irq_handler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_rx_irq_handler
</UL>

<P><STRONG><a name="[cc]"></a>i2c_err_irq_handler</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, i2c_application.o(.text.i2c_err_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = i2c_err_irq_handler &rArr; i2c_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_clear
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_get
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ERR_IRQHandler
</UL>

<P><STRONG><a name="[cd]"></a>i2c_evt_irq_handler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, i2c_application.o(.text.i2c_evt_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = i2c_evt_irq_handler &rArr; i2c_master_irq_handler_dma &rArr; i2c_start_transfer &rArr; i2c_transmit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_irq_handler_dma
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_irq_handler_dma
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_irq_handler_int
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_irq_handler_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_EVT_IRQHandler
</UL>

<P><STRONG><a name="[e4]"></a>i2c_flag_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, at32f435_437_i2c.o(.text.i2c_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_err_irq_handler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_irq_handler_dma
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_irq_handler_dma
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_irq_handler_int
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_irq_handler_int
</UL>

<P><STRONG><a name="[e3]"></a>i2c_flag_get</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, at32f435_437_i2c.o(.text.i2c_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_err_irq_handler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_irq_handler_dma
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_irq_handler_dma
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_irq_handler_int
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_irq_handler_int
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_refresh_txdt_register
</UL>

<P><STRONG><a name="[e2]"></a>i2c_interrupt_enable</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, at32f435_437_i2c.o(.text.i2c_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_err_irq_handler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_tx_rx_irq_handler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_irq_handler_dma
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_irq_handler_dma
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_irq_handler_int
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_irq_handler_int
</UL>

<P><STRONG><a name="[e7]"></a>i2c_master_irq_handler_dma</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, i2c_application.o(.text.i2c_master_irq_handler_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = i2c_master_irq_handler_dma &rArr; i2c_start_transfer &rArr; i2c_transmit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_clear
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_get
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_enable
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_interrupt_enable
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_transfer_addr_get
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start_transfer
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_reset_ctrl2_register
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_refresh_txdt_register
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_evt_irq_handler
</UL>

<P><STRONG><a name="[e5]"></a>i2c_master_irq_handler_int</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, i2c_application.o(.text.i2c_master_irq_handler_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = i2c_master_irq_handler_int &rArr; i2c_start_transfer &rArr; i2c_transmit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_clear
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_get
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_receive
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_send
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop_generate
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_interrupt_enable
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_transfer_addr_get
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start_transfer
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_reset_ctrl2_register
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_refresh_txdt_register
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_evt_irq_handler
</UL>

<P><STRONG><a name="[e9]"></a>i2c_refresh_txdt_register</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, i2c_application.o(.text.i2c_refresh_txdt_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = i2c_refresh_txdt_register &rArr; i2c_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_irq_handler_dma
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_irq_handler_dma
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_irq_handler_int
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_irq_handler_int
</UL>

<P><STRONG><a name="[ec]"></a>i2c_reset_ctrl2_register</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, i2c_application.o(.text.i2c_reset_ctrl2_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i2c_reset_ctrl2_register
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_irq_handler_dma
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_irq_handler_dma
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_irq_handler_int
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_irq_handler_int
</UL>

<P><STRONG><a name="[e8]"></a>i2c_slave_irq_handler_dma</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, i2c_application.o(.text.i2c_slave_irq_handler_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = i2c_slave_irq_handler_dma &rArr; i2c_refresh_txdt_register &rArr; i2c_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_clear
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_get
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_receive
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_interrupt_enable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_reset_ctrl2_register
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_refresh_txdt_register
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_evt_irq_handler
</UL>

<P><STRONG><a name="[e6]"></a>i2c_slave_irq_handler_int</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, i2c_application.o(.text.i2c_slave_irq_handler_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = i2c_slave_irq_handler_int &rArr; i2c_refresh_txdt_register &rArr; i2c_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_clear
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_get
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_receive
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_interrupt_enable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_reset_ctrl2_register
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_refresh_txdt_register
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_evt_irq_handler
</UL>

<P><STRONG><a name="[eb]"></a>i2c_start_transfer</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, i2c_application.o(.text.i2c_start_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = i2c_start_transfer &rArr; i2c_transmit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_transmit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_irq_handler_dma
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_irq_handler_int
</UL>

<P><STRONG><a name="[ef]"></a>i2c_stop_generate</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, at32f435_437_i2c.o(.text.i2c_stop_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i2c_stop_generate
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_irq_handler_int
</UL>

<P><STRONG><a name="[ea]"></a>i2c_transfer_addr_get</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, at32f435_437_i2c.o(.text.i2c_transfer_addr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i2c_transfer_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_irq_handler_dma
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_irq_handler_int
</UL>

<P><STRONG><a name="[f0]"></a>i2c_transmit_set</STRONG> (Thumb, 88 bytes, Stack size 28 bytes, at32f435_437_i2c.o(.text.i2c_transmit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = i2c_transmit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start_transfer
</UL>

<P><STRONG><a name="[a1]"></a>main</STRONG> (Thumb, 744 bytes, Stack size 128 bytes, main_variable_resistor_printf.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = main &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_status_get
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_start
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_init_status_get
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_flag_get
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ordinary_oversample_enable
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ordinary_oversample_restart_set
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ordinary_oversample_trig_enable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ordinary_channel_set
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_resolution_set
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_base_config
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_base_default_para_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_common_config
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_common_default_para_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receiver_enable
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmitter_enable
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_mux_config
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_output_enable
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_channel_enable
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_channel_value_set
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_output_channel_config
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_output_default_para_init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_clock_source_div_set
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_base_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_config
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[f2]"></a>nvic_priority_group_config</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, at32f435_437_misc.o(.text.nvic_priority_group_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nvic_priority_group_config &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>pca9555_irq_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, at_surf_f437_board_pca9555.o(.text.pca9555_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pca9555_irq_handler &rArr; exint_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exint_flag_clear
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exint_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT3_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>system_clock_config</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, at32f435_437_clock.o(.text.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = system_clock_config &rArr; system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_auto_step_mode_enable
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_apb1_div_set
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_apb2_div_set
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_ahb_div_set
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_flag_get
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_pll_config
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_hext_stable_wait
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clock_source_enable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>system_core_clock_update</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, system_at32f435_437.o(.text.system_core_clock_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[d5]"></a>systick_clock_source_config</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, at32f435_437_misc.o(.text.systick_clock_source_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = systick_clock_source_config
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[f4]"></a>tmr_base_init</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, at32f435_437_tmr.o(.text.tmr_base_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tmr_base_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>tmr_channel_enable</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, at32f435_437_tmr.o(.text.tmr_channel_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tmr_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>tmr_channel_value_set</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, at32f435_437_tmr.o(.text.tmr_channel_value_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tmr_channel_value_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>tmr_clock_source_div_set</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, at32f435_437_tmr.o(.text.tmr_clock_source_div_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tmr_clock_source_div_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>tmr_flag_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, at32f435_437_tmr.o(.text.tmr_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tmr_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_OVF_TMR10_IRQHandler
</UL>

<P><STRONG><a name="[f7]"></a>tmr_output_channel_config</STRONG> (Thumb, 516 bytes, Stack size 28 bytes, at32f435_437_tmr.o(.text.tmr_output_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tmr_output_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>tmr_output_default_para_init</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, at32f435_437_tmr.o(.text.tmr_output_default_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tmr_output_default_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>tmr_output_enable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, at32f435_437_tmr.o(.text.tmr_output_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tmr_output_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>usart_data_transmit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, at32f435_437_usart.o(.text.usart_data_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[101]"></a>usart_enable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, at32f435_437_usart.o(.text.usart_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>usart_flag_get</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, at32f435_437_usart.o(.text.usart_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[fe]"></a>usart_init</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, at32f435_437_usart.o(.text.usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>usart_receiver_enable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, at32f435_437_usart.o(.text.usart_receiver_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_receiver_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>usart_transmitter_enable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, at32f435_437_usart.o(.text.usart_transmitter_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_transmitter_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[123]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[122]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[124]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[125]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[bc]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bd]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[126]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[bf]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[b7]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[9b]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[6e]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[114]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12b]"></a>_ddiv</STRONG> (Thumb, 560 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[160]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[112]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12d]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[12a]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[12c]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12e]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[12f]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[96]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[161]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[162]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[129]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[78]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[7c]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[116]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, at32f435_437_misc.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_config
</UL>

<P><STRONG><a name="[b9]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[6d]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
